SQL used by:    
    - Quality Analyst
    - Data Analyst
    - Business Analyst
    - Data Engineers
    - Data Scientists
    - Software Engineers


-- What is SQL --
    - Structured Query Language
    - Used to interact with Relational DB 
        - Read | Write data
        - Create | Modify | Delete DB
        - protect data

    RDBMS (Relational DB Management System) 
        - Oracle
        - MySQL
        - Microsoft SQL Server
        - Postgres SQL
        - IBM Db2
        - SQLite
        - MariaDB
        - TeraData
        - Hive

    - Syntax will be 80% similar across all RDBMS

-- RDBMS Structure --
    - data stored in multiple tables
    - each table have set of rows & cols
    - cols are fields
    - rows are entries / records

-- SQL Commands --
    - 5 types
        1) Data Definition Language (DDL)

            - CREATE : Create new DB objects (Tables | Views | Functions  )
            - DROP : Remove DB object from DB
            - ALTER : Modify structure of existing table
            - TRUNCATE : Remove all data from table at once

        2) Data Manipulation Language (DML)
            - INSERT
            - UPDATE
            - DELETE
            - MERGE

        3) Data Control Language (DCL)
            - GRANT
            - REVOKE

        4) Transaction Control Language (TCL)
            - COMMIT
            - ROLLBACK
            - SAVEPOINT

        5) Data Query Language (DQL)
            - SELECT

== SQL Data Types ==
    - Each column has data type associated
    - Like a "Rule" in order for data to be inserted to a column

    5 most Basic Datatypes:
        1) VARCHAR(size)
            - variable character
            - storing strings
        2) INT
            - whole numbers
        3) DATE
            - date values in any format
        4) FLOAT
            - decimal
        5) BOOLEAN
            - true or false

== SQL Constraints ==
    - Limitation / restrictions applied to a column
    - impt to maintain data integrity (negative age value)

        - CHECK : control values that can be inserted
            - dont allow negative age
                eg: gender VARCHAR(10) CHECK (gender IN ('M', 'F'))
        
        - NOT NULL: ensure column value never blank / empty / null
                eg: last_name VARCHAR(100) NOT NULL,

        - UNIQUE: values inserted in every row is unique
            - null values allowed
            - null values are unique, thus multiple null allowed
                eg: id INT NOT NULL UNIQUE

        - PRIMARY KEY: ensure that column is unique & not null
            - each table can only have 1 PRIMARY KEY
                eg: address_id VARCHAR(20) PRIMARY KEY
        
        - FOREIGN KEY: form r/s b/w tables
            - parent-child r/s
            - child's key reference to parent's key
                 eg: CONSTRAINT fk_stf_addr FOREIGN KEY(address_id) REFERENCES Address(address_id)
                        - only address_id already present in the "Address" table can be inserted into address_id of "Staff" table

                        - if "ADR1001" in "Address" table,
                        - only "ADR1001" can be inserted into "Staff" table for given above constraint



====== SYNTAX ====== 

1) Data Definition Language (DDL) 
(define structure of DB (tables | views etc.))
CREATE | DROP | ALTER

CREATE (DB Objects like table | functions | views)

            CREATE TABLE IF NOT EXISTS  <table_name>
            (
                col1 <data_type>,
                col2 <data_type>,
                CONSTRAINT <constraint_name>
            );

            CREATE TABLE IF NOT EXISTS Staff
            (
                staff_id VARCHAR(20),
                stafff_type VARCHAR(30),
                school_id VARCHAR(20),
                first_name VARCHAR(100) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                age INT,
                dob DATE,
                gender VARCHAR(10) CHECK (gender IN ('M', 'F')),
                join_date DATE,
                address_id VARCHAR(20),
                CONSTRAINT pk_stf PRIMARY KEY(staff_id),
                CONSTRAINT fk_stf_schl FOREIGN KEY(school_id) REFERENCES School(school_id),
                CONSTRAINT fk_stf_addr FOREIGN KEY(address_id) REFERENCES Address(address_id)
            );


DROP (remove db object like table | views | functions etc.)

            DROP TABLE <table_name>
            DROP FUNCTION <function_name>


ALTER (modify structure of existing table)
    - rename table | column
    - modify column data type | add new cols | remove cols
    - add / remove constraints

            ALTER TABLE <table_name> DROP COLUMN <col_name>
            ALTER TABLE <table_name> RENAME TO <new_table_name>
            ALTER TABLE <table_name> RENAME COLUMN <col_name> TO <new_col_name>
                - ALTER TABLE Staff RENAME COLUMN first_name TO full_name;
            ALTER TABLE <table_name> ALTER COLUMN <col_name> TYPE <new_data_type>
                - ALTER TABLE Staff ALTER COLUMN age TYPE VARCHAR(5);
            ALTER TABLE <table_name> ADD CONSTRAINT <constraint_name> <constraint_type> <col_name_to_apply_constraint>
                - ALTER TABLE Staff ADD CONSTRAINT UNQ_STF UNIQUE (staff_type);


2) Data Manipulation Language (DML) 
    - load | modify | remove data from DB
    - INSERT | DELETE | UPDATE

INSERT (load data into table)

            INSERT INTO <table_name> (col1, col2, col3)
            VALUES ("value1", value2, value3);

            (no col names specified, must provide for all column else null)
            INSERT INTO <table_name> VALUES
            (val1, val2, val3);

            INSERT INTO Address (address_id, street, city, state, country)
            VALUES ('ADR1011', '44940 Bluestem Circle', 'Baton Rouge', Louisiana', 'United States');

            INSERT INTO Address VALUES
            ('ADR1001','44940 Bluestem Circle','Baton Rouge','Louisiana','United States'),
            ('ADR1002','029 Kropf Point','Richmond','Virginia','United States'),
            ('ADR1003','96 Jay Road','Dallas','Texas','United States'),
            ('ADR1004','15 Harbort Lane','Roanoke','Virginia','United States');

UPDATE (modify data in table)

            UPDATE <table_name>
            SET col1 = newval
            WHERE id = <val>;

            UPDATE <table_name>
            SETG col1=<new_val>, col2=<new_val>
            WHERE id=<val>;

            UPDATE Address
            SET country = 'Malaysia'
            WHERE address_id = 'ADR1003';

            UPDATE Address
            SET country = 'India', city = 'Bangalore'
            WHERE address_id = 'ADR1005';
            

DELETE (delete data from table)

            DELETE FROM <table_name>;
                - remove all data from table

            DELETE FROM <table_name> WHERE id=<val>

            DELETE FROM Address WHERE country = 'Malaysia';
            DELETE FROM School; -- Delete all data in School Table
            DELETE FROM Address; 

3) Data Query Language (DQL)
    - Retrieve data from DB
    SELECT

    SELECT * FROM <table_name> (fetch all cols / records from table)
        - SELECT * FROM Students; 

    SELECT id, first_name FROM Students;

        -- Operators in SQL useful in SELECT queries --
            Comparison Operators: =, <>, !=, >, <, >=, <=

                SELECT * FROM Subjects WHERE subject_name = 'Mathematics';
                SELECT * FROM Subjects WHERE subject_name <> 'Mathematics';
                SELECT * FROM Staff_Salary WHERE salary <= 10000;

        -- More SELECT Clauses  --
    
            SELECT * FROM Staff_Salary ORDER BY salary;
            SELECT * FROM Staff_Salary ORDER BY salary desc;

            SELECT *
            FROM myTable
            ORDER BY
            Col1 DESC, Col2 ASC;

            SELECT * FROM Staff_Salary
            WHERE salary BETWEEN 5000 AND 10000
            ORDER BY salary;

            SELECT * FROM Subjects
            WHERE subject_name IN ('Mathematics', 'Science', 'Arts');

            SELECT * FROM Subjects
            WHERE subject_name NOT IN ('Mathematics', 'Science', 'Arts')
            ORDER BY subject_name;

            SELECT * FROM Subjects
            WHERE subject_name LIKE 'S%'; -- starts with S

            SELECT DISTINCT staff_type FROM Staff;
                -- get unique values of a specific column

            SELECT staff_type FROM Staff LIMIT 5;
                -- fetch first 5 records

        -- Logical operators --
            AND & OR

            SELECT * FROM Staff
            WHERE age > 50 AND gender = 'F';

            SELECT * FROM Staff
            WHERE age > 50 OR gender = 'F';
                (either age > 50 or gender is female)

        -- Arithmetic operators --
            +, -, *, /, %

                SELECT (5 + 2); -- outputs 7 on an unknown column table
                SELECT (5 + 2) AS total; -- outputs 7 in "total" column


    SELECT <col_name>
    FROM <table_name>
    WHERE <join/filter> conditions




    -- CASE statements --
        - if else condition to assign values based on certain criteria

    SELECT staff_id, salary,
    CASE 
        WHEN salary >= 10000 THEN 'High Salary'
        WHEN salary BETWEEN 5000 AND 10000 THEN 'Average Salary'
        WHEN salary < 5000 THEN 'Low Salary'
    END AS range -- creates a "range" column for 'High Salary' / 'Average Salary' to be placed
    FROM Staff_Salary
    ORDER BY 2 DESC; -- order by column 2


-- Joining Tables (Multi Tables) --

    Method 1: (Recommended) (using JOIN keyword)
    SELECT T1.col1 as C1, T2.col2 as C2, T1.col3 as C3
    FROM table1 as T1
    JOIN table2 as T2 ON T1.col1 = T2.col1 AND T1.col2 = T2.col2;

    Method 2: (using commas to separate tables)
    SELECT T1.col1 as C1, T2.col2 as C2, T1.col3 as C3
    FROM table1 as T1, table2 as T2
    WHERE T1.col1 = T2.col1
    AND T1.col2 = T2.col2;

    eg:

    -- Fetch class name where Music is taught as subject
        - Class & Subject table

    SELECT class_name 
    FROM Subjects Sub
    JOIN Classes Cls ON Sub.subject_id = Cls.subject_id
    WHERE subject_name = 'Music';

    -- Fetch full name of all staff who teach mathematics
    
    SELECT DISTINCT (Stf.first_name||' '||Stf.last_name) AS full_name
    FROM Subjects Sub
    JOIN Classes Cls ON Cls.subject_id = Sub.subject_id
    JOIN Staff Stf ON Cls.teacher_id = Stf.staff_id
    WHERE Sub.subject_name = 'Mathematics';


-- UNION & UNION ALL --
    - writing 2 different queries to retrieve 2 sets of different data into single table
    - no. of cols in 1st query must equal no. of cols in 2nd query
    - datatype in both queries for all cols must be the same

    UNION
        - combines result from 1st & 2nd query if there is any overlap
        - removes duplicate data
    
    UNION ALL
        - shows all result, including duplicate data
        - pure data fetched from query

    -- fetch all staff teaching grade 8, 9, 10 AND non-teaching staff

    SELECT Stf.staff_type,
    (Stf.first_name||'  '||Stf.last_name) AS full_name,
    Stf.age,
    (CASE 
    WHEN Stf.gender = 'M' THEN 'Male'
    WHEN Stf.gender = 'F' THEN 'Female'
    END) AS gender,
    Stf.join_date
    FROM Staff Stf
    JOIN Classes Cls ON Stf.staff_id = Cls.teacher_id
    WHERE Stf.staff_type = 'Teaching' AND Cls.class_name IN ('Grade 8','Grade 9', 'Grade 10')
    UNION
    SELECT staff_type,
    (Stf.first_name||'  '||Stf.last_name) AS full_name, age,
    (CASE 
    WHEN Stf.gender = 'M' THEN 'Male'
    WHEN Stf.gender = 'F' THEN 'Female'
    END) AS gender,
    join_date
    FROM Staff
    WHERE staff_type = 'Non-Teaching';






4) Data Control Language (DCL)
    - access between different databases / schemas
    GRANT | REVOKE

5) Transaction Control Language (TCL)
    - used to save / undo DML transactions in DB

    COMMIT: Save open transaction (INSERT | DELETE | UPDATE)

    ROLLBACK: Undo transaction not yet committed

    SAVEPOINT: create reference points between transactions that can either commit or rollback